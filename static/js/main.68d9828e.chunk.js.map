{"version":3,"sources":["components/Statistics/index.js","components/FeedbackOptions/index.js","components/Section/index.js","components/Notification/index.js","App.js","serviceWorker.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","toFixed","FeedbackOptions","options","onLeaveFeedback","map","option","key","name","className","type","value","title","onClick","Section","props","children","Notification","message","App","state","feedbackOptions","onFeedbackAction","e","setState","countTotalFeedback","countPositiveFeedbackPercentage","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"4PAqBeA,G,MAlBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACf,oCACI,oCAAUJ,GACV,uCAAaC,GACb,mCAASC,GACT,qCAAWC,GACX,iDAAuBC,EAAmBC,UAA1C,QCWOC,EAjBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACpB,oCACKD,EAAQE,KAAI,SAACC,GAAD,OACT,2BAAOC,IAAKD,EAAOE,KAAMC,UAAU,kBAAkBC,KAAK,SAASC,MAAOL,EAAOM,MAAOC,QAAS,kBAAMT,EAAgBE,EAAOE,cCM3HM,EAVC,SAACC,GACb,OACI,yBAAKN,UAAU,WACX,4BAAKM,EAAMH,OACVG,EAAMC,WCOJC,EAVM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACjB,oCACI,2BAAIA,KCmFGC,E,4MA/EbC,MAAQ,CACNxB,KAAM,EACNC,QAAS,EACTC,IAAK,EACLC,MAAO,EACPC,mBAAoB,G,EAGtBqB,gBAAkB,CAChB,CACEb,KAAM,OACNI,MAAO,QAET,CACEJ,KAAM,UACNI,MAAO,WAET,CACEJ,KAAM,MACNI,MAAO,Q,EAIXU,iBAAmB,SAACC,GAClB,IAAIH,EACJ,OAAQG,GACN,IAAK,UACHH,EAAQ,CAAEvB,QAAS,EAAKuB,MAAMvB,QAAU,GACxC,MAEF,IAAK,MACHuB,EAAQ,CAAEtB,IAAK,EAAKsB,MAAMtB,IAAM,GAChC,MAEF,QACEsB,EAAQ,CAAExB,KAAM,EAAKwB,MAAMxB,KAAO,GAGtC,EAAK4B,SAASJ,GAAO,WACnB,EAAKK,yB,EAITA,mBAAqB,WACnB,EAAKD,SACH,CAAEzB,MAAQ,EAAKqB,MAAMxB,KAAO,EAAKwB,MAAMvB,QAAU,EAAKuB,MAAMtB,KAC5D,EAAK4B,kC,EAITA,gCAAkC,WAChC,EAAKF,SAAS,CAAExB,mBAAoB,EAAKoB,MAAMxB,KAAO,EAAKwB,MAAMrB,MAAQ,O,uDAIzE,OACE,yBAAKU,UAAU,OACb,kBAAC,EAAD,CAASG,MAAM,yBACb,kBAAC,EAAD,CACET,QAASwB,KAAKN,gBACdjB,gBAAiBuB,KAAKL,oBAE1B,kBAAC,EAAD,CAASV,MAAM,cACZe,KAAKP,MAAMrB,MACV,kBAAC,EAAD,CACEH,KAAM+B,KAAKP,MAAMxB,KACjBC,QAAS8B,KAAKP,MAAMvB,QACpBC,IAAK6B,KAAKP,MAAMtB,IAChBC,MAAO4B,KAAKP,MAAMrB,MAClBC,mBAAoB2B,KAAKP,MAAMpB,qBAE/B,kBAAC,EAAD,CAAckB,QAAQ,4B,GAzElBU,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM5B,a","file":"static/js/main.68d9828e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n    <>\n        <p>Good: {good}</p>\n        <p>Neutral: {neutral}</p>\n        <p>Bad: {bad}</p>\n        <p>Total: {total}</p>\n        <p>Positive feedback: {positivePercentage.toFixed()}%</p>\n    </>\n);\n\nStatistics.propTypes = {\n    good: PropTypes.number,\n    neutral: PropTypes.number,\n    bad: PropTypes.number,\n    total: PropTypes.number,\n    positivePercentage: PropTypes.number,\n}\n\nexport default Statistics;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\n    <>\n        {options.map((option) => (\n            <input key={option.name} className=\"feedback-action\" type=\"button\" value={option.title} onClick={() => onLeaveFeedback(option.name)} />\n        ))}\n    </>\n);\n\nFeedbackOptions.propTypes = {\n    options: PropTypes.arrayOf(\n        PropTypes.shape({\n            name: PropTypes.string,\n            title: PropTypes.string,\n        })\n    ),\n}\n\nexport default FeedbackOptions;","import React from 'react';\n\nconst Section = (props) => {\n    return (\n        <div className=\"section\">\n            <h1>{props.title}</h1>\n            {props.children}\n        </div>\n\n    )\n}\n\nexport default Section;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => (\n    <>\n        <p>{message}</p>\n    </>\n);\n\nNotification.propTypes = {\n    message: PropTypes.string,\n}\n\nexport default Notification;","import React, { Component } from 'react';\nimport './App.css';\nimport Statistics from './components/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Section from './components/Section';\nimport Notification from './components/Notification';\n\nclass App extends Component {\n\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n    total: 0,\n    positivePercentage: 0\n  };\n\n  feedbackOptions = [\n    {\n      name: 'good',\n      title: 'Good'\n    },\n    {\n      name: 'neutral',\n      title: 'Neutral'\n    },\n    {\n      name: 'bad',\n      title: 'Bad'\n    },\n  ];\n\n  onFeedbackAction = (e) => {\n    let state;\n    switch (e) {\n      case 'neutral':\n        state = { neutral: this.state.neutral + 1 };\n        break;\n\n      case 'bad':\n        state = { bad: this.state.bad + 1 };\n        break;\n\n      default:\n        state = { good: this.state.good + 1 };\n        break;\n    }\n    this.setState(state, () => {\n      this.countTotalFeedback();\n    });\n  }\n\n  countTotalFeedback = () => {\n    this.setState(\n      { total: (this.state.good + this.state.neutral + this.state.bad) },\n      this.countPositiveFeedbackPercentage\n    );\n  }\n\n  countPositiveFeedbackPercentage = () => {\n    this.setState({ positivePercentage: this.state.good / this.state.total * 100 });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Section title=\"PLease leave feedback\">\n          <FeedbackOptions\n            options={this.feedbackOptions}\n            onLeaveFeedback={this.onFeedbackAction} />\n        </Section>\n        <Section title=\"Statistics\">\n          {this.state.total ? (\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={this.state.total}\n              positivePercentage={this.state.positivePercentage} />\n          ) : (\n              <Notification message=\"No feedback given\" />\n            )}\n        </Section>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}